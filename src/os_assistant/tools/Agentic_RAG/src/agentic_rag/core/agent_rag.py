from pydantic import BaseModel, Field
from typing import Annotated, List, Dict, Any
from langgraph.graph.message import add_messages
from langgraph.graph import StateGraph, START, END
from langchain_core.messages import AIMessage, HumanMessage, SystemMessage
from langchain_ollama import OllamaLLM  
from ..config.config import OLLAMA_BASE_URL, OLLAMA_LLM_MODEL

class AgentRAGState(BaseModel):
    log_entries: Annotated[
        list, add_messages
    ] = Field(
        default_factory=list,
        description="A running list of log entries tracking agent steps and decisions."
    )

    summary: Annotated[
        list, add_messages
    ] = Field(
        default_factory=list,
        description="A list of summary sentences or findings generated by the agent."
    )

class SummaryAgent:
    def __init__(self):
        self.llm = OllamaLLM(
            base_url=OLLAMA_BASE_URL,
            model=OLLAMA_LLM_MODEL,
            temperature=0.1
        )
        self.system_prompt = (
            "You are a concise and professional summarizer agent. "
            "You will be given a log entry from an AI system. "
            "Your task is to summarize it clearly, concisely, and professionally. "
            "Each summary should be understandable even without seeing the original log."
        )

    def __call__(self, state: AgentRAGState) -> dict:
        if not state.log_entries:
            return {"summary": ["No log entries to summarize."]}

        all_summaries = []

        for log in state.log_entries:
            # Format messages properly for OllamaLLM
            messages = [
                SystemMessage(content=self.system_prompt),
                HumanMessage(content=f"Summarize the following log entry:\n\n{log}")
            ]
            
            # Use invoke with messages for better formatting
            summary_response = self.llm.invoke(messages)
            print("Summary response:", summary_response)
            all_summaries.append(str(summary_response))

        return {
            "summary": all_summaries
        }

def create_summary_graph():
    """Create and return the summarization graph."""
    graph_builder = StateGraph(AgentRAGState)
    graph_builder.add_node("summarize_log", SummaryAgent())
    graph_builder.add_edge(START, "summarize_log")
    graph_builder.add_edge("summarize_log", END)
    return graph_builder.compile()

def summarize_logs(logs: List[Dict[str, Any]]) -> List[str]:
    """
    Summarize a list of log entries using the AgentRAG system.
    
    Args:
        logs: List of log entries to summarize
        
    Returns:
        List of summaries for each log entry
    """
    graph = create_summary_graph()
    
    # Convert logs to a format suitable for the AgentRAGState
    log_entries = []
    for log in logs:
        # Format the log content in a readable way
        log_text = f"Log #{log['log_number']} (Similarity: {log['similarity']:.4f})\n"
        log_text += f"Timestamp: {log['timestamp']}\n"
        log_text += f"Text: {log['log_text']}"
        log_entries.append(log_text)
    
    # Run the graph with the log entries
    result = graph.invoke({"log_entries": log_entries})
    
    if "summary" in result:
        return result["summary"]
    else:
        print("Warning: No summary found in result")
        return ["Unable to generate summary"]
